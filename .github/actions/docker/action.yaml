name: Docker Image Build
description: Builds Cobalt build docker images.
inputs:
  docker_service:
    description: "Docker compose service."
    required: true
  docker_image:
    description: "Docker image name."
    required: true
outputs:
  docker_tag:
    description: "Docker image tag generated by this action."
    value: ${{ steps.set-docker-tag-output.outputs.docker_tag }}
runs:
  using: "composite"
  steps:
    - name: Get docker file changes
      id: changed-files
      uses: tj-actions/changed-files@v13.1
      with:
        files: |
          src/docker-compose.yml
          src/docker/linux/**
          src/docker/trigger_docker_build.txt
          .github/actions/docker/**
    - name: Retrieve Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{env.REGISTRY}}/${{github.repository}}/${{inputs.docker_image}}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
    - name: Set Docker Tag
      run: |
        set -x
        docker_tag="${{ steps.meta.outputs.tags }}"
        docker_tag="${docker_tag%.1[+,-]}"
        echo "DOCKER_TAG=${docker_tag}" >> $GITHUB_ENV
      shell: bash
    # We need to set docker tag properly for pull requests.  In those scenarios where no docker related files
    # were changed we need to use an existing image (e.g. main).  In cases where docker image is rebuilt we have
    # to use tag generated by the image build.
    - name: Set Docker Tag
      if: ${{ (steps.changed-files.outputs.any_changed == 'false') && (github.event_name == 'pull_request') }}
      run: echo "DOCKER_TAG=ghcr.io/${{github.repository}}/${{inputs.docker_image}}:${GITHUB_BASE_REF%.1+}" >> $GITHUB_ENV
      shell: bash
    - name: Process Docker metadata
      id: process-docker
      run: |
        set -x
        set +e
        docker manifest inspect $DOCKER_TAG > /dev/null
        if [[ $? -ne 0 || ${{ steps.changed-files.outputs.any_changed }} == 'true' ]]; then
          echo "::set-output name=need_to_build::true"
        else
          echo "::set-output name=need_to_build::false"
        fi
      shell: bash
    - name: Build containers with docker-compose
      if: steps.process-docker.outputs.need_to_build == 'true'
      uses: smartlyio/docker-compose-action@v1
      with:
        serviceName: ${{ inputs.docker_service }}
        build: false
        push: "on:push"
        composeArguments: "--no-start"
        composeFile: "src/docker-compose.yml"
    - name: Tag images
      if: steps.process-docker.outputs.need_to_build == 'true'
      run: docker tag ${{inputs.docker_image}} $DOCKER_TAG
      shell: bash
    - name: Push images
      if: steps.process-docker.outputs.need_to_build == 'true'
      run: docker push ${DOCKER_TAG}
      shell: bash
    - name: Set Docker Tag Output
      id: set-docker-tag-output
      run: |
        echo "::set-output name=docker_tag::$(echo $DOCKER_TAG)"
      shell: bash
