name: Upload Unit Test Results

on:
  workflow_run:
    workflows:
      - linux
      # TODO: Temporary testing
      - testing
      # TODO: Download xml files from GCS
      # - android
      # - raspi
      # TODO: Generate xml files
      # - win32
      # TODO: Get xml files from platforms
      # - atv
      # - ps
      # - switch
      # - xbox
    types:
      - completed

jobs:
  # Gets unit test report from artifact storage and uploads them to DataDog.
    unit-test-report:
      permissions: {}
      if: always()
      runs-on: ubuntu-latest
      name: Upload Unit Test Reports
      steps:
        - name: Collect Unit Test Reports
          id: collect-report
          uses: actions/github-script@v6
          with:
            script: |
              console.log('context', context);
              console.log('context.payload.workflow_run.pull_requests', context.payload.workflow_run.pull_requests);
              console.log('context.payload.workflow_run.head_commit', context.payload.workflow_run.head_commit);

              let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: context.payload.workflow_run.id,
              });
              console.log(allArtifacts);
              let matchArtifacts = allArtifacts.data.artifacts.filter((artifact) => {
                return artifact.name == "unit-test-results"
              });
              console.log(matchArtifacts)
              if (matchArtifacts.length == 0) {
                // No reports were uploaded.
                console.log('No unit test reports were uploaded');
                return false;
              }
              let download = await github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: matchArtifacts[0].id,
                  archive_format: 'zip',
              });
              let fs = require('fs');
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/unit-test-results.zip`, Buffer.from(download.data));
              return true;
        - run: unzip unit-test-results.zip -d unit-test-results
          if: ${{ steps.collect-report.outputs.result == 'true' }}
        - name: Install node
          if: steps.collect-report.outputs.result
          uses: actions/setup-node@v3
          with:
            node-version: 16
        - name: Get Datadog CLI
          if: ${{ steps.collect-report.outputs.result == 'true' }}
          shell: bash
          # TODO: pin version (with checksum?)
          run: npm install -g @datadog/datadog-ci
        - name: Upload the JUnit files
          if: ${{ steps.collect-report.outputs.result == 'true' }}
          shell: bash
          env:
            DATADOG_API_KEY: ${{ secrets.DD_API_KEY }}
            DATADOG_SITE: us5.datadoghq.com
            DD_ENV: ci
            DD_SERVICE: ${{ github.event.repository.name }}
            # TODO
            # DD_METRICS:

            DD_GIT_COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
            DD_GIT_REPOSITORY_URL: ${{ github.event.repository.git_url }}

            # DD_GIT_BRANCH:

            # DD_GIT_COMMIT_MESSAGE
            # Commit message.
            # Example: Set release number

            # DD_GIT_COMMIT_AUTHOR_NAME
            # Commit author name.
            # Example: John Smith

            # DD_GIT_COMMIT_AUTHOR_EMAIL
            # Commit author email.
            # Example: john@example.com

            # DD_GIT_COMMIT_AUTHOR_DATE
            # Commit author date in ISO 8601 format.
            # Example: 2021-03-12T16:00:28Z

            # DD_GIT_COMMIT_COMMITTER_NAME
            # Commit committer name.
            # Example: Jane Smith

            # DD_GIT_COMMIT_COMMITTER_EMAIL
            # Commit committer email.
            # Example: jane@example.com

            # DD_GIT_COMMIT_COMMITTER_DATE
            # Commit committer date in ISO 8601 format.
            # Example: 2021-03-12T16:00:28Z
          run: |

            for dir in unit-test-results/*/; do
              echo "Uploading $dir test report"

              tags=`cat ${dir}TAGS`

              datadog-ci junit upload \
                        --tags $tags \
                        $dir/**/*.xml
            done
