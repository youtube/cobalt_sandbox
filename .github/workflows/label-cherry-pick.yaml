name: Label Cherry Pick

on:
  pull_request_target:
    types:
      - closed

jobs:
  prepare_branch_list:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.merged == true &&
      github.event.pull_request.merge_commit_sha != null
    outputs:
      target_branch: ${{ steps.set-branches.outputs.target_branch }}
    steps:
    - name: Set Branches
      id: set-branches
      env:
        PR_LABELS: ${{ toJson(github.event.pull_request.labels) }}
        EVENT_ACTION: ${{ github.event.action }}
        BASE_REF: ${{ github.base_ref }}
      run: |
        labels=$(echo "$PR_LABELS" | jq -r '.[].name')

        branches=("24.lts.1+" "23.lts.1+" "22.lts.1+" "21.lts.1+" "20.lts.1+" "19.lts.1+" "rc_11" "COBALT_9")
        filtered_branches=()
        for branch in "${branches[@]}"; do
          if [[ $branch == $BASE_REF ]]; then
            continue
          fi

          for label in $labels; do
            if [[ $label == "cp-$branch" ]]; then
              filtered_branches+=("$branch")
            fi
          done
        done

        echo "target_branch=$(echo -n "$filtered_branches" | jq -cRs 'split("\n")')" >> $GITHUB_OUTPUT

  cherry_pick:
    runs-on: ubuntu-latest
    needs: prepare_branch_list
    if: needs.prepare_branch_list.outputs.target_branch != '[]'
    strategy:
      matrix:
        target_branch: ${{ fromJson(needs.prepare_branch_list.outputs.target_branch) }}
    env:
      ACCESS_TOKEN: ${{ secrets.CHERRY_PICK_TOKEN }}
      REPOSITORY: ${{ github.repository }}
      GITHUB_REF: ${{ github.ref }}
      MERGE_COMMIT_SHA: ${{ github.event.pull_request.merge_commit_sha }}
    steps:
      - name: Checkout repository
        uses: kaidokert/checkout@v3.5.999
        timeout-minutes: 30
        with:
          ref: ${{ matrix.target_branch }}
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Release Automation"
          git config --global user.email "github@google.com"

      - name: Cherry pick merge commit
        id: cherry-pick
        continue-on-error: true
        run: |
          git fetch origin ${{ matrix.target_branch }}
          set +e
          git cherry-pick -x ${MERGE_COMMIT_SHA}
          RES=$?
          if [ $RES -ne 0 ]; then
            # If the cherry pick failed due to a merge conflict we can
            # add the conflicting file and create the commit anyway.
            git add .
            git cherry-pick --continue
            RES=$?

            # If the cherry pick fails again it could be a merge commit.
            # Try to select the first parent (-m 1) as the mainline tree.
            if [ $RES -ne 0 ]; then
              git cherry-pick -x -m 1 ${MERGE_COMMIT_SHA}
              RES=$?
            fi
          fi
          set -e
          exit $RES

      - name: Create Pull Request
        id: create-pr
        continue-on-error: true
        uses: peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04 # v4.2.3
        with:
          token: ${{ secrets.CHERRY_PICK_TOKEN }}
          draft: ${{ steps.cherry-pick.outcome == 'failure' }}
          base: ${{ matrix.target_branch }}
          branch: "cherry-pick-${{ matrix.target_branch }}-${{ github.event.pull_request.number }}"
          committer: GitHub Release Automation <github@google.com>
          reviewers: ${{ github.event.pull_request.user.login }}
          title: "Cherry pick PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}"
          body: |
            Refer to the original PR: https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}

            ${{ github.event.pull_request.body }}
      - name: Comment on failure
        uses: actions/github-script@v2
        with:
          github-token: ${{ secrets.CHERRY_PICK_TOKEN }}
          script: |
            if (!'${{ steps.create-pr.outputs.pull-request-number }}') {
              // Comment on the originating PR if creating a cherry pick PR failed.
              github.issues.createComment({
                issue_number: github.event.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '> [!IMPORTANT]\n> Creating the cherry pick PR failed! Check the log at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}.'
              });
            } else if ('${{ steps.cherry-pick.outcome }}' == 'failure') {
              // Comment on the new PR if the cherry pick failed.
              github.issues.createComment({
                issue_number: ${{ steps.create-pr.outputs.pull-request-number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '> [!IMPORTANT]\n> The cherry-pick failed! Check out the PR branch (${{ matrix.target_branch }}-${{ github.event.pull_request.number }}) and fix the conflicts before proceeding.'
              });
            }
